version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
          type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: 
            SUCCESS=$(curl --insecure  https://kvdb.io/WCvb5nVg21mwNyYW7LJp4n/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Fix vulnerabilities on frontend dependencies abd rescan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Fix vulnerabilities on backend dependencies abd rescan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical
                         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar && yum install -y gzip 
      - run: 
          name: create backend-stack
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run: 
          name: create frontend-stack
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            
      - run:
          name: Get public IP of previous EC2 for inventory file
          command: |
            export EC2_tagged=backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=${EC2_tagged}" "Name=instance-state-name,Values=running" \
            --output text >> ./.circleci/ansible/inventory.txt

      - destroy_environment

      - run:
          name: Create workspace directory 
          command: |
            mkdir -p /workspace 
            cp ./.circleci/ansible/inventory.txt /workspace/inventory.txt
            cat  /workspace/inventory.txt

      - persist_to_workspace:
          root: /workspace
          paths: 
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.9.13
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: 
            - "46:55:b0:51:d8:5f:2a:a7:1f:09:28:e8:89:63:da:f5"

      - attach_workspace:
          at: /workspace

      - run:
          name: Install dependencies
          command: |
            pip install awscli
            pip install --upgrade --user ansible
      
      - run:
          name: Config server
          command: |
              export PATH=$PATH:~/.local/bin
              export ANSIBLE_HOST_KEY_CHECKING=False
              cd .circleci/ansible
              ansible-playbook -i /workspace/inventory.txt configure-server.yml
              
      - destroy_environment
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt \
              then \
                  curl https://kvdb.io/WCvb5nVg21mwNyYW7LJp4n/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' \
              fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install tar
          command: |
            yum install -y tar gzip                         
      - attach_workspace:
          at: /workspace 

      - run:
          name: Install dependencies
          command: |
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo -E bash - 
            yum install -y nodejs
            yum install -y npm                  

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 t1.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env          

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend

      - deploy-infrastructure:
          requires: [test-frontend,test-backend,scan-frontend]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations