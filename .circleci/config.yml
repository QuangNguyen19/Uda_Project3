version: 2.1
commands:
  destroy_environment:
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack_name>>
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Fix vulnerabilities on frontend dependencies abd rescan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Fix vulnerabilities on backend dependencies abd rescan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical
                         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar && yum install -y gzip 
      - run: 
          name: create backend-stack
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - destroy_environment:
          stack_name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

      - run: 
          name: create frontend-stack
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            
      - destroy_environment:
          stack_name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Get public IP of previous EC2 for inventory file
          command: |
            export EC2_tagged=backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=${EC2_tagged}" "Name=instance-state-name,Values=running" \
            --output text >> ./.circleci/ansible/inventory.txt

      - run:
          name: Create workspace directory 
          command: |
            mkdir -p /workspace 
            cp ./.circleci/ansible/inventory.txt /workspace/inventory.txt
            cat  /workspace/inventory.txt

      - persist_to_workspace:
          root: /workspace
          paths: 
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: 
            - "46:55:b0:51:d8:5f:2a:a7:1f:09:28:e8:89:63:da:f5"

      - attach_workspace:
          at: /workspace

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
      
      - run:
          name: Config server
          command: |
              cd .circleci/ansible
              ansible-playbook -i /workspace/inventory.txt configure-server.yml

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure